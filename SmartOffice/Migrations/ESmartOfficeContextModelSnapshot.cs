// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOffice.ModelsEsmartOffice;

namespace SmartOffice.Migrations
{
    [DbContext(typeof(ESmartOfficeContext))]
    partial class ESmartOfficeContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SmartOffice.Models.MenuCMMFooter", b =>
                {
                    b.Property<string>("GroupCateg");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Action");

                    b.Property<string>("Badges");

                    b.Property<string>("BadgesName");

                    b.Property<string>("Controller");

                    b.Property<bool>("Download");

                    b.Property<string>("GroupName");

                    b.Property<string>("IconClass");

                    b.Property<string>("Image");

                    b.Property<string>("MenuNameE");

                    b.Property<string>("MenuNameJ");

                    b.Property<string>("MenuNameT");

                    b.Property<string>("MenuUrl");

                    b.Property<string>("Param");

                    b.HasKey("GroupCateg", "DisplayOrder");

                    b.ToTable("menuCMMFooter");
                });

            modelBuilder.Entity("SmartOffice.Models.MenuCMMHeader", b =>
                {
                    b.Property<string>("GroupCateg");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Action");

                    b.Property<string>("Badges");

                    b.Property<string>("BadgesName");

                    b.Property<string>("Controller");

                    b.Property<bool>("Download");

                    b.Property<string>("GroupName");

                    b.Property<string>("IconClass");

                    b.Property<string>("Image");

                    b.Property<int>("MenuIdentity");

                    b.Property<string>("MenuNameE");

                    b.Property<string>("MenuNameJ");

                    b.Property<string>("MenuNameT");

                    b.Property<string>("MenuUrl");

                    b.Property<string>("Param");

                    b.HasKey("GroupCateg", "DisplayOrder");

                    b.ToTable("MenuCMMHeader");
                });

            modelBuilder.Entity("SmartOffice.Models.SubSystems", b =>
                {
                    b.Property<string>("GroupCateg");

                    b.Property<string>("GroupSub");

                    b.Property<int>("MenuIdentity");

                    b.Property<int>("DisplayOrder");

                    b.Property<string>("Action");

                    b.Property<string>("Badges");

                    b.Property<string>("BadgesName");

                    b.Property<string>("Controller");

                    b.Property<bool>("Download");

                    b.Property<string>("GroupName");

                    b.Property<string>("IconClass");

                    b.Property<string>("Image");

                    b.Property<int>("MenuIdentityParent");

                    b.Property<string>("MenuNameE");

                    b.Property<string>("MenuNameJ");

                    b.Property<string>("MenuNameT");

                    b.Property<string>("MenuUrl");

                    b.Property<string>("Param");

                    b.HasKey("GroupCateg", "GroupSub", "MenuIdentity", "DisplayOrder");

                    b.ToTable("subSystems");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetGroup", b =>
                {
                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("DivisionCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200);

                    b.Property<int?>("OrderNo");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GroupCateg");

                    b.ToTable("AspNetGroup");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetGroupMenu", b =>
                {
                    b.Property<int>("GroupMenuId")
                        .HasColumnName("GroupMenuID");

                    b.Property<string>("Badges")
                        .HasMaxLength(100);

                    b.Property<string>("BadgesName")
                        .HasMaxLength(100);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("GroupCateg")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("GroupDisplayOrder");

                    b.Property<string>("GroupMenuName")
                        .HasMaxLength(100);

                    b.Property<string>("IconClass")
                        .HasMaxLength(100);

                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("GroupMenuId")
                        .HasName("PK_AspNetGroupMenu_1");

                    b.HasIndex("GroupCateg");

                    b.HasIndex("PartId");

                    b.ToTable("AspNetGroupMenu");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetMenu", b =>
                {
                    b.Property<int>("MenuIdentity");

                    b.Property<string>("Action")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("Badges")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("BadgesName")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Download");

                    b.Property<string>("IconClass")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("Image")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("MenuNameE")
                        .HasMaxLength(250);

                    b.Property<string>("MenuNameJ")
                        .HasMaxLength(250);

                    b.Property<string>("MenuNameT")
                        .HasMaxLength(250);

                    b.Property<string>("MenuUrl")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(100);

                    b.Property<string>("Param")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("('')")
                        .HasMaxLength(50);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MenuIdentity");

                    b.ToTable("AspNetMenu");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetMenuControl", b =>
                {
                    b.Property<int>("MenuIdentity");

                    b.Property<int>("MenuIdentityParent");

                    b.Property<int>("DisplayOrder");

                    b.Property<int>("GroupMenuId")
                        .HasColumnName("GroupMenuID");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MenuIdentity", "MenuIdentityParent", "DisplayOrder", "GroupMenuId");

                    b.HasIndex("GroupMenuId");

                    b.HasIndex("MenuIdentityParent");

                    b.ToTable("AspNetMenuControl");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetMenuRoles", b =>
                {
                    b.Property<int>("MenuIdentity");

                    b.Property<string>("RoleId")
                        .HasMaxLength(200);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("MenuIdentity", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetMenuRoles");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetRoleClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetRoles", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .IsRequired()
                        .HasMaxLength(256);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("([NormalizedName] IS NOT NULL)");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserClaims", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserLogins", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserRoles", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200);

                    b.Property<string>("RoleId")
                        .HasMaxLength(200);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserTokens", b =>
                {
                    b.Property<string>("UserId")
                        .HasMaxLength(200);

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(100);

                    b.Property<string>("Name")
                        .HasMaxLength(100);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUsers", b =>
                {
                    b.Property<string>("Id")
                        .HasMaxLength(200);

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("Bldg")
                        .HasMaxLength(2);

                    b.Property<string>("ConcurrencyStamp");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GroupCateg")
                        .IsRequired()
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.Property<string>("OperatorSign")
                        .IsUnicode(false);

                    b.Property<string>("PasswordHash")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(8);

                    b.HasKey("Id");

                    b.HasIndex("GroupCateg");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("([NormalizedUserName] IS NOT NULL)");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ConfirmPasswordReset", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool?>("ActiveStatus")
                        .HasColumnName("active_status");

                    b.Property<string>("ComputerName")
                        .HasColumnName("computer_name")
                        .HasMaxLength(50);

                    b.Property<string>("ConfirmId")
                        .HasColumnName("confirm_id")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("ConfrimDate")
                        .HasColumnName("confrim_date")
                        .HasColumnType("date");

                    b.Property<DateTime?>("RequestDate")
                        .HasColumnName("request_date")
                        .HasColumnType("date");

                    b.Property<string>("Username")
                        .HasColumnName("username")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ConfirmPassword_Reset");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ControlConfig", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("ConfigOrder");

                    b.Property<string>("BgD")
                        .HasMaxLength(100);

                    b.Property<string>("BgH")
                        .HasMaxLength(100);

                    b.Property<string>("ColorButton")
                        .HasMaxLength(100);

                    b.Property<string>("ColorTextH")
                        .HasMaxLength(100);

                    b.Property<string>("CorlorTextD")
                        .HasMaxLength(100);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("TextH")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PartId", "GroupCateg", "ConfigOrder");

                    b.HasIndex("GroupCateg");

                    b.ToTable("ControlConfig");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ControlPart", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("Action")
                        .HasMaxLength(100);

                    b.Property<string>("Controller")
                        .HasMaxLength(100);

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<string>("PartName")
                        .HasMaxLength(100);

                    b.Property<string>("PathUrl")
                        .HasMaxLength(100);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PartId")
                        .HasName("PK_AspNetPart");

                    b.ToTable("ControlPart");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.Division", b =>
                {
                    b.Property<string>("DivisionCode")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("DivisionName")
                        .HasMaxLength(50);

                    b.Property<int?>("OrderNo");

                    b.HasKey("DivisionCode");

                    b.ToTable("Division");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.GenerateNumber", b =>
                {
                    b.Property<int>("Year");

                    b.Property<int>("Month");

                    b.Property<string>("TypeId")
                        .HasColumnName("Type_id")
                        .HasMaxLength(10);

                    b.Property<int?>("Sequence");

                    b.HasKey("Year", "Month", "TypeId");

                    b.ToTable("GenerateNumber");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ImgHeader", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("ImgOrder");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Download");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<bool?>("ImgActive");

                    b.Property<string>("ImgPath")
                        .HasMaxLength(100);

                    b.Property<string>("ImgType")
                        .HasMaxLength(100);

                    b.Property<bool?>("Link")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LinkName")
                        .HasMaxLength(100);

                    b.Property<string>("LinkPath")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PartId", "GroupCateg", "ImgOrder");

                    b.HasIndex("GroupCateg");

                    b.ToTable("ImgHeader");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ImgTextHeader", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("ImgOrder");

                    b.Property<int>("TextHorder")
                        .HasColumnName("TextHOrder");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<bool>("Download");

                    b.Property<bool?>("Link")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((0))");

                    b.Property<string>("LinkPath")
                        .HasMaxLength(100);

                    b.Property<string>("TextD")
                        .HasMaxLength(300);

                    b.Property<string>("TextH")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PartId", "GroupCateg", "ImgOrder", "TextHorder");

                    b.ToTable("ImgTextHeader");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.NnewsDetail", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("NewHorder")
                        .HasColumnName("NewHOrder");

                    b.Property<int>("NewDorder")
                        .HasColumnName("NewDOrder");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("ItemType")
                        .HasMaxLength(100);

                    b.Property<bool?>("ShowPublic");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Value")
                        .HasMaxLength(400);

                    b.Property<string>("Value1")
                        .HasMaxLength(400);

                    b.HasKey("PartId", "GroupCateg", "NewHorder", "NewDorder")
                        .HasName("PK_NewsDetail");

                    b.ToTable("NNewsDetail");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.NnewsHeader", b =>
                {
                    b.Property<int>("PartId")
                        .HasColumnName("PartID");

                    b.Property<string>("GroupCateg")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int>("NewHorder")
                        .HasColumnName("NewHOrder");

                    b.Property<string>("Badges")
                        .HasMaxLength(100);

                    b.Property<string>("BadgesName")
                        .HasMaxLength(100);

                    b.Property<int?>("ChildType");

                    b.Property<string>("CreateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Disable")
                        .ValueGeneratedOnAdd()
                        .HasDefaultValueSql("((1))");

                    b.Property<bool>("Download");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date");

                    b.Property<string>("IconClass")
                        .HasMaxLength(100);

                    b.Property<string>("ImgPath")
                        .HasMaxLength(100);

                    b.Property<string>("LinkPath")
                        .HasMaxLength(100);

                    b.Property<string>("NewsType")
                        .HasMaxLength(100);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("date");

                    b.Property<string>("Title1")
                        .HasMaxLength(400);

                    b.Property<string>("Title2");

                    b.Property<string>("UpdateBy")
                        .HasMaxLength(8);

                    b.Property<DateTime?>("UpdateDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("PartId", "GroupCateg", "NewHorder")
                        .HasName("PK_NewsHeader");

                    b.HasIndex("GroupCateg");

                    b.ToTable("NNewsHeader");
                });

            modelBuilder.Entity("SmartOffice.ModelsForm.FormMenu", b =>
                {
                    b.Property<string>("GroupCateg");

                    b.Property<int>("MenuIdentity");

                    b.Property<string>("Action");

                    b.Property<string>("Badges");

                    b.Property<string>("BadgesName");

                    b.Property<string>("Controller");

                    b.Property<bool>("Disable");

                    b.Property<int>("DisplayOrder");

                    b.Property<bool>("Download");

                    b.Property<int>("GroupDisplayOrder");

                    b.Property<int>("GroupMenuID");

                    b.Property<string>("GroupMenuName");

                    b.Property<string>("GroupName");

                    b.Property<string>("IconClass");

                    b.Property<int>("MenuIdentityParent");

                    b.Property<string>("MenuNameE");

                    b.Property<string>("MenuNameJ");

                    b.Property<string>("MenuNameT");

                    b.Property<string>("MenuUrl");

                    b.Property<string>("Param");

                    b.Property<int>("PartID");

                    b.HasKey("GroupCateg", "MenuIdentity");

                    b.ToTable("FormMenu");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetGroupMenu", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroup", "GroupCategNavigation")
                        .WithMany("AspNetGroupMenu")
                        .HasForeignKey("GroupCateg")
                        .HasConstraintName("FK_AspNetGroupMenu_AspNetGroup_DocumentGroupCateg")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartOffice.ModelsEsmartOffice.ControlPart", "Part")
                        .WithMany("AspNetGroupMenu")
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetMenuControl", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroupMenu", "GroupMenu")
                        .WithMany("AspNetMenuControl")
                        .HasForeignKey("GroupMenuId");

                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetMenu", "MenuIdentityNavigation")
                        .WithMany("AspNetMenuControlMenuIdentityNavigation")
                        .HasForeignKey("MenuIdentity");

                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetMenu", "MenuIdentityParentNavigation")
                        .WithMany("AspNetMenuControlMenuIdentityParentNavigation")
                        .HasForeignKey("MenuIdentityParent");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetMenuRoles", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetMenu", "MenuIdentityNavigation")
                        .WithMany("AspNetMenuRoles")
                        .HasForeignKey("MenuIdentity");

                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetRoles", "Role")
                        .WithMany("AspNetMenuRoles")
                        .HasForeignKey("RoleId");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetRoleClaims", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetRoles", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserClaims", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetUsers", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserLogins", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetUsers", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserRoles", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetRoles", "Role")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetUsers", "User")
                        .WithMany("AspNetUserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUserTokens", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetUsers", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.AspNetUsers", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroup", "GroupCategNavigation")
                        .WithMany("AspNetUsers")
                        .HasForeignKey("GroupCateg")
                        .HasConstraintName("FK_AspNetUsers_AspNetGroup_DocumentGroupCateg")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ControlConfig", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroup", "GroupCategNavigation")
                        .WithMany("ControlConfig")
                        .HasForeignKey("GroupCateg")
                        .HasConstraintName("FK_ControlConfig_AspNetGroup_DocumentGroupCateg")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartOffice.ModelsEsmartOffice.ControlPart", "Part")
                        .WithMany("ControlConfig")
                        .HasForeignKey("PartId");
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ImgHeader", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroup", "GroupCategNavigation")
                        .WithMany("ImgHeader")
                        .HasForeignKey("GroupCateg")
                        .HasConstraintName("FK_ImgHeader_AspNetGroup_DocumentGroupCateg")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartOffice.ModelsEsmartOffice.ControlPart", "Part")
                        .WithMany("ImgHeader")
                        .HasForeignKey("PartId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.ImgTextHeader", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.ImgHeader", "ImgHeader")
                        .WithMany("ImgTextHeader")
                        .HasForeignKey("PartId", "GroupCateg", "ImgOrder")
                        .HasConstraintName("FK_ImgTextHeader_ImgHeader")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.NnewsDetail", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.NnewsHeader", "NnewsHeader")
                        .WithMany("NnewsDetail")
                        .HasForeignKey("PartId", "GroupCateg", "NewHorder")
                        .HasConstraintName("FK_NewsDetail_NewsHeader")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SmartOffice.ModelsEsmartOffice.NnewsHeader", b =>
                {
                    b.HasOne("SmartOffice.ModelsEsmartOffice.AspNetGroup", "GroupCategNavigation")
                        .WithMany("NnewsHeader")
                        .HasForeignKey("GroupCateg")
                        .HasConstraintName("FK_NewsHeader_AspNetGroup_DocumentGroupCateg")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SmartOffice.ModelsEsmartOffice.ControlPart", "Part")
                        .WithMany("NnewsHeader")
                        .HasForeignKey("PartId")
                        .HasConstraintName("FK_NewsHeader_ControlPart_PartID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
